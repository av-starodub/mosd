<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
    <property name="severity" value="error"/>
    <property name="charset" value="UTF-8"/>
    <module name="TreeWalker">
        <!-- Проверяет, что имена абстрактных классов начинаются с "Abstract" или заканчиваются на "Base" -->
        <module name="AbstractClassName"/>

        <!-- Проверяет, что не используются импорты с подстановочными знаками -->
        <module name="AvoidStarImport"/>

        <!-- Проверяет, что параметры catch-блоков следуют заданным соглашениям об именах -->
        <module name="CatchParameterName"/>

        <!-- Проверяет, что параметры типов в классах и интерфейсах следуют соглашениям об именах -->
        <module name="ClassTypeParameterName"/>

        <!-- Проверяет, что имена констант следуют соглашениям об именах -->
        <module name="ConstantName"/>

        <!-- Проверяет, что параметры типов в интерфейсах следуют соглашениям об именах -->
        <module name="InterfaceTypeParameterName"/>

        <!-- Проверяет, что параметры лямбда-выражений следуют соглашениям об именах -->
        <module name="LambdaParameterName"/>

        <!-- Проверяет, что имена локальных финальных переменных следуют соглашениям об именах -->
        <module name="LocalFinalVariableName"/>

        <!-- Проверяет, что имена локальных переменных следуют соглашениям об именах -->
        <module name="LocalVariableName"/>

        <!-- Проверяет, что имена полей класса следуют соглашениям об именах -->
        <module name="MemberName"/>

        <!-- Проверяет, что имена методов следуют соглашениям об именах -->
        <module name="MethodName"/>

        <!-- Проверяет, что параметры типов методов следуют соглашениям об именах -->
        <module name="MethodTypeParameterName"/>

        <!-- Проверяет, что параметры методов следуют соглашениям об именах -->
        <module name="ParameterName"/>

        <!-- Проверяет, что в одном файле содержится не более одного верхнего уровня класса или интерфейса -->
        <module name="OneTopLevelClass"/>

        <!-- Проверяет расположение аннотаций -->
        <module name="AnnotationLocation">
            <property name="allowSamelineMultipleAnnotations" value="false"/>
            <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
            <property name="allowSamelineParameterizedAnnotation" value="false"/>
        </module>

        <!-- Проверяет, что блоки catch не пусты или содержат заданный формат комментария -->
        <module name="EmptyCatchBlock">
            <property name="commentFormat" value="Ignored"/>
        </module>

        <!-- Проверяет, что для всех блоков используются фигурные скобки -->
        <module name="NeedBraces"/>

        <!-- Проверяет расположение левых фигурных скобок -->
        <module name="LeftCurly">
            <property name="ignoreEnums" value="false"/>
        </module>

        <!-- Проверяет расположение правых фигурных скобок -->
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="LITERAL_ELSE, METHOD_DEF, CTOR_DEF, COMPACT_CTOR_DEF, LITERAL_FOR, LITERAL_WHILE"/>
        </module>
        <module name="RightCurly">
            <property name="option" value="same"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_DO"/>
        </module>

        <!-- Проверяет количество исключений, объявленных в методе -->
        <module name="ThrowsCount">
            <property name="max" value="2"/>
            <property name="ignorePrivateMethods" value="false"/>
        </module>

        <!-- Проверяет, что модификаторы видимости указаны для классов и членов классов -->
        <module name="VisibilityModifier"/>

        <!-- Проверяет порядок объявлений полей и методов в классе -->
        <module name="DeclarationOrder"/>

        <!-- Запрещает использование определенных типов -->
        <module name="IllegalType">
            <property name="illegalClassNames"
                      value="HashMap, HashSet, LinkedHashMap, LinkedHashSet, TreeMap, TreeSet, Hashtable, ArrayList, LinkedList, Vector, java.util.HashMap, java.util.HashSet, java.util.LinkedHashMap, java.util.LinkedHashSet, java.util.TreeMap, java.util.TreeSet, java.util.Hashtable, java.util.ArrayList, java.util.LinkedList, java.util.Vector"/>
        </module>

        <!-- Проверяет, что в одной строке объявляется не более одной переменной -->
        <module name="MultipleVariableDeclarations"/>

        <!-- Проверяет, что в одной строке содержится не более одного оператора -->
        <module name="OneStatementPerLine"/>

        <!-- Проверяет наличие неиспользуемых импортов -->
        <module name="UnusedImports"/>

        <!-- Проверяет наличие пустых строк между объявлениями -->
        <module name="EmptyLineSeparator"/>

        <!-- Проверяет максимальную глубину вложенности циклов for -->
        <module name="NestedForDepth"/>

        <!-- Проверяет максимальную глубину вложенности условий if -->
        <module name="NestedIfDepth"/>

        <!-- Проверяет максимальную глубину вложенности блоков try -->
        <module name="NestedTryDepth"/>

        <!-- Проверяет максимальную длину метода -->
        <module name="MethodLength">
            <property name="max" value="25"/>
        </module>

        <!-- Проверяет максимальное количество типов верхнего уровня в файле -->
        <module name="OuterTypeNumber"/>

        <!-- Проверяет максимальное количество параметров метода -->
        <module name="ParameterNumber">
            <property name="max" value="5"/>
        </module>

        <!-- Проверяет максимальную сложность булевых выражений -->
        <module name="BooleanExpressionComplexity">
            <property name="max" value="4"/>
        </module>

        <!-- Проверяет максимальное количество полей и методов, которые использует класс -->
        <module name="ClassDataAbstractionCoupling">
            <property name="max" value="17"/>
        </module>

        <!-- Проверяет цикломатическую сложность методов -->
        <module name="CyclomaticComplexity">
            <property name="max" value="12"/>
        </module>

        <!-- Проверяет сложность путей в методах -->
        <module name="NPathComplexity">
            <property name="max" value="200"/>
        </module>

        <!-- Проверяет количество некомментарных строк кода (NCSS) в методах и классах -->
        <module name="JavaNCSS">
            <property name="methodMaximum" value="25"/>
            <property name="classMaximum" value="800"/>
        </module>

        <!-- Проверяет соответствие XPath-запросам для различных паттернов кода -->
        <module name="MatchXpath">
            <property name="query"
                      value="//CLASS_DEF[./IDENT[not(contains(@text, 'Config')) and not(ends-with(@text, 'Test'))]] /OBJBLOCK/VARIABLE_DEF/MODIFIERS/ANNOTATION/IDENT[@text='Autowired']"/>
            <message key="matchxpath.match" value="Внедрение должно осуществляться через конструктор"/>
        </module>

        <module name="MatchXpath">
            <property name="query"
                      value="//CLASS_DEF[./IDENT[not(contains(@text, 'Config')) and not(ends-with(@text, 'Test'))]] /OBJBLOCK/METHOD_DEF/MODIFIERS/ANNOTATION/IDENT[@text='Autowired']"/>
            <message key="matchxpath.match" value="Внедрение должно осуществляться через конструктор"/>
        </module>

        <module name="MatchXpath">
            <property name="query" value="//CLASS_DEF/OBJBLOCK/METHOD_DEF//SLIST[count(ancestor::SLIST) >= 4]"/>
            <message key="matchxpath.match" value="Большая вложенность блоков в методе, максимум 5"/>
        </module>

        <!-- Проверяет наличие пробелов вокруг определенных конструкций -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
        </module>

        <!-- Проверяет порядок модификаторов (например, public, protected, private) -->
        <module name="ModifierOrder"/>

        <!-- Проверяет пробелы вокруг круглых скобок -->
        <module name="ParenPad"/>
    </module>

    <!-- Проверяет максимальную длину строк в файле -->
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="121"/>
    </module>
</module>
